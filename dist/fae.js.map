{"version":3,"file":"fae.js","sources":["../src/core/EventEmitter.js","../src/core/Entity.js","../src/core/EntityCollection.js","../src/core/SystemManager.js","../src/utils/getTime.js","../src/utils/defaultLoop.js","../src/utils/logBanner.js","../src/core/Application.js","../src/fae.js"],"sourcesContent":["// A small event emitter class.\nexport class EventEmitter {\n  constructor() {\n    // A Map where the keys are event names and the values are Maps of\n    // listener-function/frontArgs pairs.\n    this.events = new Map();\n  }\n\n  // Register the given event listener.\n  addListener(event, listener, ...frontArgs) {\n    let listeners = this.events.get(event);\n\n    // Create a new Map to hold the event's listeners, if it doesn't exist yet.\n    if (!listeners) {\n      listeners = new Map();\n      this.events.set(event, listeners);\n    }\n\n    // Add the listener to the Map, paired with its frontArgs.\n    // The frontArgs are always passed as the first arguments to this listener\n    // when the event is emitted.\n    listeners.set(listener, frontArgs);\n\n    return this;\n  }\n\n  // Unregister the given event listener.\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners.\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments.\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.forEach((frontArgs, listener) => {\n      listener.call(undefined, ...frontArgs, ...args);\n    });\n  }\n}\n","// Represents a \"thing\" in the game world.\n// It is an empty container to which components are attached.\n// Components are the data that describe what the entity is.\nexport class Entity {\n  constructor(collection) {\n    this.collection = collection;\n    this.app = collection.app;\n\n    this.components = new Map();\n    this.tags = new Set();\n\n    // All entities have the 'all' tag.\n    this.tag(\"all\");\n  }\n\n  // Attach the provided component to this entity.\n  attach(component, ...args) {\n    this[component.tag] = component.init(this, ...args);\n    this.components.set(component.tag, component);\n    this.tag(component.tag);\n    return this;\n  }\n\n  // Remove the given component from this entity.\n  detach(tag) {\n    const { exit } = this.components.get(tag);\n    this[tag] = undefined;\n    this.components.delete(tag);\n    this.untag(tag);\n    if (exit) exit(this);\n    return this;\n  }\n\n  // Add the tag to this entity.\n  // (And add the entity to the corresponding index of the collection.)\n  tag(tag) {\n    this.tags.add(tag);\n    this.collection.index(tag).set.add(this);\n    return this;\n  }\n\n  // Remove the tag from this entity.\n  // (And remove the entity from the corresponding index.)\n  untag(tag) {\n    this.tags.delete(tag);\n    this.collection.index(tag).set.delete(this);\n    return this;\n  }\n\n  // Clean up any attached components and free all internal references\n  // to the entity, allowing it to be garbage collected.\n  destroy() {\n    this.components.values().forEach(({ exit }) => {\n      if (exit) exit(this);\n    });\n    this.tags.forEach((tag) => {\n      this.collection.index(tag).set.delete(this);\n    });\n    this.destroyed = true;\n  }\n}\n","import { Entity } from \"./Entity.js\";\n\n// Represents a set of entities, usually as the result of a query.\n// Additional queries can be chained.\nclass EntitySet {\n  constructor(collection, entities) {\n    this.collection = collection;\n    this.set = new Set(entities);\n  }\n\n  // Return a new set containing only the entities from this set which\n  // have the given tag.\n  and(tag) {\n    return this.filter((entity) => entity.tags.has(tag));\n  }\n\n  // Return a new set containing only the entities from this set which\n  // do not have the given tag.\n  andNot(tag) {\n    return this.filter((entity) => !entity.tags.has(tag));\n  }\n\n  // Return a new set containing a union between this set and the set of\n  // entities which have the given tag.\n  or(tag) {\n    return new EntitySet(this.collection, [\n      ...this.set,\n      ...this.collection.get(tag),\n    ]);\n  }\n\n  // Return a new set filtered in a similar way to `Array.prototype.filter`.\n  filter(callback) {\n    const filtered = new EntitySet(this.collection);\n    this.forEach((entity) => {\n      if (callback(entity)) filtered.set.add(entity);\n    });\n    return filtered;\n  }\n\n  // See `Set.prototype.forEach`.\n  forEach(callback) {\n    this.set.forEach(callback);\n  }\n\n  // Allow iteration of this object.\n  [Symbol.iterator]() {\n    return this.set.values();\n  }\n}\n\n// Represents the collection of all entities for an app and provides an\n// interface to access them.\nexport class EntityCollection {\n  constructor(app) {\n    // The Application instance. This is only stored so that entities can\n    // access it from component `init` or `exit` functions.\n    this.app = app;\n\n    // Store internal indexes for quickly accessing entities grouped by tags.\n    this.indexes = new Map();\n  }\n\n  // Return a new entity managed by this collection.\n  create() {\n    return new Entity(this);\n  }\n\n  // Return the set of entities for the given tag.\n  get(tag) {\n    if (this.indexes.has(tag)) return this.indexes.get(tag);\n    else return new EntitySet(this);\n  }\n\n  // Return the requested index, creating it if necessary.\n  index(tag) {\n    let set;\n    if (this.indexes.has(tag)) {\n      set = this.indexes.get(tag);\n    } else {\n      set = new EntitySet(this);\n      this.indexes.set(tag, set);\n    }\n    return set;\n  }\n}\n","export class SystemManager {\n  constructor(app) {\n    // The Application instance.\n    this.app = app;\n\n    // A Set containing all currently running systems.\n    this.systems = new Set();\n  }\n\n  // Initialize the system and register its event listener.\n  start(system) {\n    const args = [system.event, system.action, this.app];\n    if (system.init) {\n      const initialState = system.init(this.app);\n      if (initialState !== undefined) args.push(initialState);\n    }\n    this.systems.add(system);\n    this.app.event.addListener(...args);\n  }\n\n  // Unregister system's event listener and clean up.\n  stop(system) {\n    this.app.event.removeListener(system.event, system.action);\n    this.systems.delete(system);\n    if (system.exit) system.exit(this.app);\n  }\n}\n","// Return # of seconds past an arbitrary point in time.\nexport function getTime() {\n  if (globalThis.performance) return performance.now() / 1000;\n  else {\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import { getTime } from \"./getTime.js\";\n\n// This is the default game loop used if you do not provide a custom\n// `startGame` function to the Application constructor.\nexport function defaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function step() {\n    // Calculate frame delta time in seconds.\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame.\n  function rafLoop() {\n    step();\n    requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame if available, otherwise use setInterval.\n  if (globalThis.requestAnimationFrame) requestAnimationFrame(rafLoop);\n  else setInterval(step, 1000 / 60);\n}\n","import pkg from \"../../package.json\";\n\n// Display a nice banner in the console.\nexport function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (globalThis.document) {\n    // Style with CSS in browsers.\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences otherwise.\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","import { EventEmitter } from \"./EventEmitter.js\";\nimport { EntityCollection } from \"./EntityCollection.js\";\nimport { SystemManager } from \"./SystemManager.js\";\nimport { defaultLoop } from \"../utils/defaultLoop.js\";\nimport { logBanner } from \"../utils/logBanner.js\";\n\n// Provides an interface to events, entities, and systems.\nexport class Application {\n  constructor({ hideBanner = false, startGame = defaultLoop, state = {} }) {\n    // A store for global state.\n    this.state = state;\n\n    // An EventEmitter for messaging throughout the game.\n    this.event = new EventEmitter();\n\n    // An EntityCollection for creating and querying entities.\n    this.entity = new EntityCollection(this);\n\n    // A SystemManager for starting and stopping systems.\n    this.system = new SystemManager(this);\n\n    // Call the `startGame` function, which should initiate the game loop.\n    // It takes the app instance as its only argument.\n    startGame(this);\n\n    // Print the fae banner to console unless `hideBanner` is true.\n    if (!hideBanner) logBanner();\n  }\n}\n","import { Application } from \"./core/Application.js\";\nimport { getTime } from \"./utils/getTime.js\";\nimport { logBanner } from \"./utils/logBanner.js\";\n\nexport { Application } from \"./core/Application.js\";\nexport { getTime } from \"./utils/getTime.js\";\nexport { logBanner } from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  getTime,\n  logBanner,\n};\n"],"names":["EventEmitter","[object Object]","this","events","Map","event","listener","frontArgs","listeners","get","set","delete","size","args","forEach","call","undefined","Entity","collection","app","components","tags","Set","tag","component","init","exit","untag","add","index","values","destroyed","EntitySet","entities","filter","entity","has","callback","filtered","Symbol","iterator","EntityCollection","indexes","SystemManager","systems","system","action","initialState","push","addListener","removeListener","getTime","globalThis","performance","now","t","process","hrtime","defaultLoop","currentTime","dt","lastTime","step","emit","requestAnimationFrame","rafLoop","setInterval","logBanner","message","pkg","document","console","log","replace","Application","hideBanner","startGame","state"],"mappings":"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"}