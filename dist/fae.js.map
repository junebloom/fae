{"version":3,"file":"fae.js","sources":["../src/utils/logBanner.js","../src/core/EventEmitter.js","../src/utils/getTime.js","../src/core/defaultLoop.js","../src/fae.js","../src/core/Application.js","../src/core/Entity.js"],"sourcesContent":["import pkg from \"../../package.json\";\n\n// Display a nice banner in the console\nexport default function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (globalThis.document) {\n    // Style with CSS in browsers\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences in node\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","// A small event emitter class which implements a subset of the Node API of the\n// same name\nexport default class EventEmitter {\n  constructor() {\n    // ## Properties\n    // *(read-only)*\n\n    // A Map where the keys are event names and the values are Maps of\n    // listener-function/frontArgs pairs\n    this.events = new Map();\n  }\n\n  // ## Methods\n\n  // Register the given event listener\n  addListener(event, listener, ...frontArgs) {\n    let listeners = this.events.get(event);\n\n    // Create a new Map to hold the event's listeners, if it doesn't exist yet\n    if (!listeners) {\n      listeners = new Map();\n      this.events.set(event, listeners);\n    }\n\n    // Add the listener to the Map, paired with its frontArgs.\n    // The frontArgs are always passed as the first arguments to this listener\n    // when the event is emitted.\n    listeners.set(listener, frontArgs);\n\n    return this;\n  }\n\n  // Unregister the given event listener\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.forEach((frontArgs, listener) => {\n      listener.call(undefined, ...frontArgs, ...args);\n    });\n  }\n}\n","// Return # of seconds past an arbitrary point in time in browser or node\nexport default function getTime() {\n  if (globalThis.performance) return performance.now() / 1000;\n  else {\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import getTime from \"../utils/getTime.js\";\n\n// Default game loop used if you do not provide a custom `startGame` function to\n// the `Application` constructor\nexport default function defaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function gameLoop() {\n    // Calculate frame delta time in seconds\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame\n  function rafLoop() {\n    gameLoop();\n    requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame if available, otherwise use setInterval\n  // In either case, wait a frame before beginning\n  if (globalThis.requestAnimationFrame) requestAnimationFrame(rafLoop);\n  else setInterval(gameLoop, 1000 / 60);\n}\n","import Application from \"./core/Application.js\";\nimport Entity from \"./core/Entity.js\";\nimport getTime from \"./utils/getTime.js\";\nimport logBanner from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  Entity,\n  utils: { getTime, logBanner },\n};\n","import logBanner from \"../utils/logBanner.js\";\nimport EventEmitter from \"./EventEmitter.js\";\nimport defaultLoop from \"./defaultLoop.js\";\n\n// Provides events and manages systems, scenes, and entity groups\nexport default class Application {\n  constructor({ hideBanner = false, startGame = defaultLoop }) {\n    // ## Properties\n    // *(read-only)*\n\n    // An EventEmitter for messaging throughout the game\n    this.event = new EventEmitter();\n\n    // A Set containing all currently running ECS systems\n    this.systems = new Set();\n\n    // An object whose keys are group names and whose values are Sets\n    // containing groups of related entities\n    this.groups = {};\n    this.createGroup(\"all\");\n\n    // Call the `startGame` function, which should initiate the game loop\n    // It takes the app instance as its only argument\n    startGame(this);\n\n    // Print the fae banner to console unless `hideBanner` is truthy\n    if (!hideBanner) logBanner();\n  }\n\n  // ## Methods\n\n  // Create an empty group with the given name and return it\n  createGroup(name) {\n    this.groups[name] = new Set();\n    return this.groups[name];\n  }\n\n  // Return an array of entities that belong to *all* of the provided groups\n  entitiesWith(...groups) {\n    for (const group of groups) if (!this.groups[group]) return [];\n    groups.sort((a, b) => this.groups[a].size - this.groups[b].size);\n    const entities = [];\n    for (const entity of this.groups[groups[0]]) {\n      if (entity.hasGroups(...groups)) entities.push(entity);\n    }\n    return entities;\n  }\n\n  // Initialize the system and register its event listener.\n  startSystem(system) {\n    this.systems.add(system);\n\n    const args = [system.event, system.action, this];\n    if (system.init) {\n      const initialState = system.init(this);\n      if (initialState !== undefined) args.push(initialState);\n    }\n    this.event.addListener(...args);\n  }\n\n  // Unregister system's event listener and clean up\n  stopSystem(system) {\n    this.event.removeListener(system.event, system.action);\n    if (system.exit) system.exit(this);\n    this.systems.delete(system);\n  }\n\n  // Stop/destroy all non-persistent systems and entities\n  // Includes persistent entities if `clearAll` is truthy\n  clear(clearAll = false) {\n    for (const system of this.systems) {\n      if (!system.persistent || clearAll) this.stopSystem(system);\n    }\n    for (const entity of this.groups.all) {\n      if (!entity.persistent || clearAll) entity.destroy();\n    }\n  }\n}\n","// Composes one logical 'object' in the game using components\nexport default class Entity {\n  constructor(app) {\n    // ## Properties\n    // *(read-only)*\n\n    // A reference to an `Application` instance\n    this.app = app;\n\n    // The Set of group names that this entity is a member of\n    this.groups = new Set();\n\n    // Add this entity to the 'all' group\n    this.group(\"all\");\n  }\n\n  // ## Methods\n\n  // Attach the provided component instances to this entity\n  attach(...components) {\n    for (const component of components) {\n      this[component.key] = component;\n      this.group(component.key);\n      if (component.componentWasAttached) component.componentWasAttached(this);\n    }\n    return this;\n  }\n\n  // Remove the given components from this entity\n  detach(...components) {\n    for (const component of components) {\n      if (this[component.key] !== component)\n        throw new Error(\"component is not attached to this entity\");\n      if (component.componentWillBeDetached)\n        component.componentWillBeDetached(this);\n      this.ungroup(component.key);\n      this[component.key] = null;\n    }\n    return this;\n  }\n\n  // Add this entity to the provided groups,\n  // creating any that don't already exist\n  group(...groupNames) {\n    for (const name of groupNames) {\n      (this.app.groups[name] || this.app.createGroup(name)).add(this);\n      this.groups.add(name);\n    }\n    return this;\n  }\n\n  // Remove this entity from the provided groups\n  ungroup(...groupNames) {\n    for (const name of groupNames) {\n      if (!this.app.groups[name]) continue;\n      this.app.groups[name].delete(this);\n      this.groups.delete(name);\n    }\n    return this;\n  }\n\n  // Return `true` if this entity belongs to every group provided\n  hasGroups(...groups) {\n    for (const group of groups) {\n      if (!this.groups.has(group)) return false;\n    }\n    return true;\n  }\n\n  // Return an array of all components attached to this entity\n  getComponents() {\n    const components = [];\n    for (const [key, value] of Object.entries(this)) {\n      if (value && value.key && value.key === key && this.groups.has(key)) {\n        components.push(value);\n      }\n    }\n    return components;\n  }\n\n  // Free all of fae's internal references to the entity,\n  // allowing it to be garbage collected\n  destroy() {\n    this.detach(...this.getComponents());\n    this.ungroup(...this.groups);\n    this.destroyed = true;\n  }\n}\n"],"names":["logBanner","message","pkg","globalThis","document","console","log","replace","EventEmitter","[object Object]","this","events","Map","event","listener","frontArgs","listeners","get","set","delete","size","args","forEach","call","undefined","getTime","performance","now","t","process","hrtime","defaultLoop","app","currentTime","dt","lastTime","gameLoop","emit","requestAnimationFrame","rafLoop","setInterval","Application","hideBanner","startGame","systems","Set","groups","createGroup","name","group","sort","a","b","entities","entity","hasGroups","push","system","add","action","init","initialState","addListener","removeListener","exit","clearAll","persistent","stopSystem","all","destroy","Entity","components","component","key","componentWasAttached","Error","componentWillBeDetached","ungroup","groupNames","has","value","Object","entries","detach","getComponents","destroyed","utils"],"mappings":"gCAGe,SAASA,IACtB,MAAMC,EAAU,WAAWC,0BAAoCA,KAE3DC,WAAWC,SAEbC,QAAQC,IACNL,EACA,uHAMA,gBAIFI,QAAQC,IACNL,EACGM,QAAQ,KAAM,aACdA,QAAQ,KAAM,aAAqB,QCrB7B,MAAMC,EACnBC,cAMEC,KAAKC,OAAS,IAAIC,IAMpBH,YAAYI,EAAOC,KAAaC,GAC9B,IAAIC,EAAYN,KAAKC,OAAOM,IAAIJ,GAahC,OAVKG,IACHA,EAAY,IAAIJ,IAChBF,KAAKC,OAAOO,IAAIL,EAAOG,IAMzBA,EAAUE,IAAIJ,EAAUC,GAEjBL,KAITD,eAAeI,EAAOC,GACpB,MAAME,EAAYN,KAAKC,OAAOM,IAAIJ,GAClC,GAAKG,EAOL,OALAA,EAAUG,OAAOL,GAGM,IAAnBE,EAAUI,MAAYV,KAAKC,OAAOQ,OAAON,GAEtCH,KAKTD,KAAKI,KAAUQ,GACb,MAAML,EAAYN,KAAKC,OAAOM,IAAIJ,GAC7BG,GAELA,EAAUM,QAAQ,CAACP,EAAWD,KAC5BA,EAASS,UAAKC,KAAcT,KAAcM,MCnDjC,SAASI,IACtB,GAAItB,WAAWuB,YAAa,OAAOA,YAAYC,MAAQ,IAClD,CACH,MAAMC,EAAIC,QAAQC,SAClB,OAAOF,EAAE,GAAKA,EAAE,GAAK,KCDV,SAASG,EAAYC,GAClC,IACIC,EAAaC,EADbC,EAAWV,IAGf,SAASW,IAEPH,EAAcR,IACdS,EAAKD,EAAcE,EACnBA,EAAWF,EAEXD,EAAInB,MAAMwB,KAAK,SAAUH,GACzBF,EAAInB,MAAMwB,KAAK,QAWblC,WAAWmC,sBAAuBA,uBAPtC,SAASC,IACPH,IACAE,sBAAsBC,MAMnBC,YAAYJ,EAAU,IAAO,ICtBpC,MAAe,CACbK,YCDa,MACbhC,aAAYiC,WAAEA,GAAa,EAAKC,UAAEA,EAAYZ,IAK5CrB,KAAKG,MAAQ,IAAIL,EAGjBE,KAAKkC,QAAU,IAAIC,IAInBnC,KAAKoC,OAAS,GACdpC,KAAKqC,YAAY,OAIjBJ,EAAUjC,MAGLgC,GAAY1C,IAMnBS,YAAYuC,GAEV,OADAtC,KAAKoC,OAAOE,GAAQ,IAAIH,IACjBnC,KAAKoC,OAAOE,GAIrBvC,gBAAgBqC,GACd,IAAK,MAAMG,KAASH,EAAQ,IAAKpC,KAAKoC,OAAOG,GAAQ,MAAO,GAC5DH,EAAOI,KAAK,CAACC,EAAGC,IAAM1C,KAAKoC,OAAOK,GAAG/B,KAAOV,KAAKoC,OAAOM,GAAGhC,MAC3D,MAAMiC,EAAW,GACjB,IAAK,MAAMC,KAAU5C,KAAKoC,OAAOA,EAAO,IAClCQ,EAAOC,aAAaT,IAASO,EAASG,KAAKF,GAEjD,OAAOD,EAIT5C,YAAYgD,GACV/C,KAAKkC,QAAQc,IAAID,GAEjB,MAAMpC,EAAO,CAACoC,EAAO5C,MAAO4C,EAAOE,OAAQjD,MAC3C,GAAI+C,EAAOG,KAAM,CACf,MAAMC,EAAeJ,EAAOG,KAAKlD,WACZc,IAAjBqC,GAA4BxC,EAAKmC,KAAKK,GAE5CnD,KAAKG,MAAMiD,eAAezC,GAI5BZ,WAAWgD,GACT/C,KAAKG,MAAMkD,eAAeN,EAAO5C,MAAO4C,EAAOE,QAC3CF,EAAOO,MAAMP,EAAOO,KAAKtD,MAC7BA,KAAKkC,QAAQzB,OAAOsC,GAKtBhD,MAAMwD,GAAW,GACf,IAAK,MAAMR,KAAU/C,KAAKkC,QACnBa,EAAOS,aAAcD,GAAUvD,KAAKyD,WAAWV,GAEtD,IAAK,MAAMH,KAAU5C,KAAKoC,OAAOsB,IAC1Bd,EAAOY,aAAcD,GAAUX,EAAOe,YDnE/CC,OENa,MACb7D,YAAYuB,GAKVtB,KAAKsB,IAAMA,EAGXtB,KAAKoC,OAAS,IAAID,IAGlBnC,KAAKuC,MAAM,OAMbxC,UAAU8D,GACR,IAAK,MAAMC,KAAaD,EACtB7D,KAAK8D,EAAUC,KAAOD,EACtB9D,KAAKuC,MAAMuB,EAAUC,KACjBD,EAAUE,sBAAsBF,EAAUE,qBAAqBhE,MAErE,OAAOA,KAITD,UAAU8D,GACR,IAAK,MAAMC,KAAaD,EAAY,CAClC,GAAI7D,KAAK8D,EAAUC,OAASD,EAC1B,MAAM,IAAIG,MAAM,4CACdH,EAAUI,yBACZJ,EAAUI,wBAAwBlE,MACpCA,KAAKmE,QAAQL,EAAUC,KACvB/D,KAAK8D,EAAUC,KAAO,KAExB,OAAO/D,KAKTD,SAASqE,GACP,IAAK,MAAM9B,KAAQ8B,GAChBpE,KAAKsB,IAAIc,OAAOE,IAAStC,KAAKsB,IAAIe,YAAYC,IAAOU,IAAIhD,MAC1DA,KAAKoC,OAAOY,IAAIV,GAElB,OAAOtC,KAITD,WAAWqE,GACT,IAAK,MAAM9B,KAAQ8B,EACZpE,KAAKsB,IAAIc,OAAOE,KACrBtC,KAAKsB,IAAIc,OAAOE,GAAM7B,OAAOT,MAC7BA,KAAKoC,OAAO3B,OAAO6B,IAErB,OAAOtC,KAITD,aAAaqC,GACX,IAAK,MAAMG,KAASH,EAClB,IAAKpC,KAAKoC,OAAOiC,IAAI9B,GAAQ,OAAO,EAEtC,OAAO,EAITxC,gBACE,MAAM8D,EAAa,GACnB,IAAK,MAAOE,EAAKO,KAAUC,OAAOC,QAAQxE,MACpCsE,GAASA,EAAMP,KAAOO,EAAMP,MAAQA,GAAO/D,KAAKoC,OAAOiC,IAAIN,IAC7DF,EAAWf,KAAKwB,GAGpB,OAAOT,EAKT9D,UACEC,KAAKyE,UAAUzE,KAAK0E,iBACpB1E,KAAKmE,WAAWnE,KAAKoC,QACrBpC,KAAK2E,WAAY,IF7EnBC,MAAO,CAAE7D,QAAAA,EAASzB,UAAAA"}