{"version":3,"file":"fae.js","sources":["../src/core/EventEmitter.js","../src/core/Entity.js","../src/core/EntitySet.js","../src/core/EntityCollection.js","../src/core/SystemManager.js","../src/utils/getTime.js","../src/utils/startDefaultLoop.js","../src/utils/logBanner.js","../src/core/Application.js","../src/fae.js"],"sourcesContent":["// A small event emitter class.\nexport class EventEmitter {\n  constructor() {\n    // A Map where the keys are event names and the values are Maps of\n    // listener-function/frontArgs pairs.\n    this.events = new Map();\n  }\n\n  // Register the given event listener.\n  addListener(event, listener, frontArgs) {\n    let listeners = this.events.get(event);\n\n    // Create a new Map to hold the event's listeners, if it doesn't exist yet.\n    if (!listeners) {\n      listeners = new Map();\n      this.events.set(event, listeners);\n    }\n\n    // Add the listener to the Map, paired with its frontArgs.\n    // The frontArgs are always passed as the first arguments to this listener\n    // when the event is emitted.\n    listeners.set(listener, frontArgs);\n\n    return this;\n  }\n\n  // Unregister the given event listener.\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners.\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments.\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.forEach((frontArgs, listener) => {\n      if (frontArgs) listener(...frontArgs, ...args);\n      else listener(...args);\n    });\n  }\n}\n","// Represents a \"thing\" in the game world.\n// It is an empty container to which components are attached.\n// Components are the data that describe what the entity is.\nexport class Entity {\n  constructor(collection) {\n    this.collection = collection;\n    this.app = collection.app;\n\n    this.components = new Map();\n    this.tags = new Set();\n\n    // All entities have the 'all' tag.\n    this.tag(\"all\");\n  }\n\n  // Attach the provided component to this entity.\n  attach(component, ...initArgs) {\n    this[component.tag] = component.init(this, ...initArgs);\n    this.components.set(component.tag, component);\n    this.tag(component.tag);\n    return this;\n  }\n\n  // Remove the given component from this entity.\n  detach(tag) {\n    const { exit } = this.components.get(tag);\n    this[tag] = undefined;\n    this.components.delete(tag);\n    this.untag(tag);\n    if (exit) exit(this);\n    return this;\n  }\n\n  // Add the tag to this entity.\n  // (And add the entity to the corresponding index of the collection.)\n  tag(tag) {\n    this.tags.add(tag);\n    this.collection.index(tag).set.add(this);\n    return this;\n  }\n\n  // Remove the tag from this entity.\n  // (And remove the entity from the corresponding index.)\n  untag(tag) {\n    this.tags.delete(tag);\n    this.collection.index(tag).set.delete(this);\n    return this;\n  }\n\n  // Clean up any attached components and free all internal references\n  // to the entity, allowing it to be garbage collected.\n  destroy() {\n    this.components.values().forEach(({ exit }) => {\n      if (exit) exit(this);\n    });\n    this.tags.forEach((tag) => {\n      this.collection.index(tag).set.delete(this);\n    });\n    this.destroyed = true;\n  }\n}\n","// Represents a set of entities, usually as the result of a query.\nexport class EntitySet {\n  constructor(collection, entities) {\n    this.collection = collection;\n    this.set = new Set(entities);\n  }\n\n  // Return a new set containing only the entities from this set which\n  // have the given tag.\n  and(tag) {\n    return this.filter((entity) => entity.tags.has(tag));\n  }\n\n  // Return a new set containing only the entities from this set which\n  // do not have the given tag.\n  andNot(tag) {\n    return this.filter((entity) => !entity.tags.has(tag));\n  }\n\n  // Return a new set containing a union between this set and the set of\n  // entities which have the given tag.\n  or(tag) {\n    return new EntitySet(this.collection, [\n      ...this.set,\n      ...this.collection.get(tag),\n    ]);\n  }\n\n  // Return a new set filtered in a similar way to `Array.prototype.filter`.\n  filter(callback) {\n    const filtered = new EntitySet(this.collection);\n    this.forEach((entity) => {\n      if (callback(entity)) filtered.set.add(entity);\n    });\n    return filtered;\n  }\n\n  // See `Set.prototype.forEach`.\n  forEach(callback) {\n    this.set.forEach(callback);\n  }\n\n  // Allow iteration of this object.\n  [Symbol.iterator]() {\n    return this.set.values();\n  }\n}\n","import { Entity } from \"./Entity.js\";\nimport { EntitySet } from \"./EntitySet.js\";\n\n// Represents the collection of all entities for an app and provides an\n// interface to access them.\nexport class EntityCollection {\n  constructor(app) {\n    // The Application instance. This is only stored so that entities can\n    // access it from component `init` or `exit` functions.\n    this.app = app;\n\n    // Store internal indexes for quickly accessing entities grouped by tags.\n    this.indexes = new Map();\n  }\n\n  // Return a new entity managed by this collection.\n  create() {\n    return new Entity(this);\n  }\n\n  // Return the set of entities with the given tag.\n  get(tag) {\n    if (this.indexes.has(tag)) return this.indexes.get(tag);\n    else return new EntitySet(this);\n  }\n\n  // Return the requested index, creating it if necessary.\n  // The difference between this and get() is that this creates, stores, and\n  // returns a new index if it receives a tag that has no index,\n  // while `get` simply returns an empty set.\n  index(tag) {\n    let set;\n    if (this.indexes.has(tag)) {\n      set = this.indexes.get(tag);\n    } else {\n      set = new EntitySet(this);\n      this.indexes.set(tag, set);\n    }\n    return set;\n  }\n}\n","export class SystemManager {\n  constructor(app) {\n    // The Application instance.\n    this.app = app;\n\n    // A Set containing all currently running systems.\n    this.systems = new Set();\n  }\n\n  // Initialize the system and register its event listener.\n  start(system, ...initArgs) {\n    const frontArgs = [this.app];\n    if (system.init) {\n      const initialState = system.init(this.app, ...initArgs);\n      if (initialState !== undefined) frontArgs.push(initialState);\n    }\n    this.systems.add(system);\n    this.app.event.addListener(system.event, system.action, frontArgs);\n  }\n\n  // Unregister system's event listener and clean up.\n  stop(system) {\n    this.app.event.removeListener(system.event, system.action);\n    this.systems.delete(system);\n    if (system.exit) system.exit(this.app);\n  }\n}\n","// Return the number of seconds passed since some fixed point in time.\nexport function getTime() {\n  if (globalThis.performance) return performance.now() / 1000;\n  else {\n    // Fall back to a Node API if high-quality standards aren't implemented.\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import { getTime } from \"./getTime.js\";\n\n// This is the default game loop used if you do not provide a custom\n// `startGame` function to the Application constructor.\nexport function startDefaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function step() {\n    // Calculate frame delta time in seconds.\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame.\n  function rafLoop() {\n    step();\n    requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame if available, otherwise use setInterval.\n  if (globalThis.requestAnimationFrame) requestAnimationFrame(rafLoop);\n  else setInterval(step, 1000 / 60);\n}\n","import pkg from \"../../package.json\";\n\n// Display a nice banner in the console.\nexport function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (globalThis.document) {\n    // Style with CSS in browsers.\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences otherwise.\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","import { EventEmitter } from \"./EventEmitter.js\";\nimport { EntityCollection } from \"./EntityCollection.js\";\nimport { SystemManager } from \"./SystemManager.js\";\nimport { startDefaultLoop } from \"../utils/startDefaultLoop.js\";\nimport { logBanner } from \"../utils/logBanner.js\";\n\n// Provides an interface to events, entities, and systems.\nexport class Application {\n  constructor({\n    startGame = startDefaultLoop,\n    state = {},\n    hideBanner = false,\n  }) {\n    // A store for global state.\n    this.state = state;\n\n    // An EventEmitter for messaging throughout the game.\n    this.event = new EventEmitter();\n\n    // An EntityCollection for creating and querying entities.\n    this.entity = new EntityCollection(this);\n\n    // A SystemManager for starting and stopping systems.\n    this.system = new SystemManager(this);\n\n    // Call the `startGame` function, which should initiate the game loop.\n    // It takes the app instance as its only argument.\n    startGame(this);\n\n    // Print the fae banner to console unless `hideBanner` is true.\n    if (!hideBanner) logBanner();\n  }\n}\n","import { Application } from \"./core/Application.js\";\nimport { getTime } from \"./utils/getTime.js\";\nimport { logBanner } from \"./utils/logBanner.js\";\n\nexport { Application } from \"./core/Application.js\";\nexport { getTime } from \"./utils/getTime.js\";\nexport { logBanner } from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  getTime,\n  logBanner,\n};\n"],"names":["EventEmitter","[object Object]","this","events","Map","event","listener","frontArgs","listeners","get","set","delete","size","args","forEach","Entity","collection","app","components","tags","Set","tag","component","initArgs","init","exit","undefined","untag","add","index","values","destroyed","EntitySet","entities","filter","entity","has","callback","filtered","Symbol","iterator","EntityCollection","indexes","SystemManager","systems","system","initialState","push","addListener","action","removeListener","getTime","globalThis","performance","now","t","process","hrtime","startDefaultLoop","currentTime","dt","lastTime","step","emit","requestAnimationFrame","rafLoop","setInterval","logBanner","message","pkg","document","console","log","replace","Application","startGame","state","hideBanner"],"mappings":"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"}