{"version":3,"file":"fae.js","sources":["../src/core/EventEmitter.js","../src/core/Entity.js","../src/core/EntitySet.js","../src/core/EntityCollection.js","../src/core/SystemManager.js","../src/utils/getTime.js","../src/utils/startDefaultLoop.js","../src/utils/logBanner.js","../src/core/Application.js","../src/fae.js"],"sourcesContent":["// A small event emitter class.\nexport class EventEmitter {\n  constructor() {\n    // A Map where the keys are event names and the values are Sets of\n    // listeners for that event.\n    this.events = new Map();\n  }\n\n  // Register the given event listener.\n  addListener(event, listener) {\n    let listeners = this.events.get(event);\n\n    // Create a new Set to hold the event's listeners, if it doesn't exist yet.\n    if (!listeners) {\n      listeners = new Set();\n      this.events.set(event, listeners);\n    }\n\n    listeners.add(listener);\n    return this;\n  }\n\n  // Unregister the given event listener.\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners.\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments.\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n    listeners.forEach((listener) => listener(...args));\n  }\n}\n","// Represents a \"thing\" in the game world.\n// It is an empty container to which components are attached.\n// Components are the data that describe what the entity is.\nexport class Entity {\n  constructor(collection) {\n    this.collection = collection;\n    this.app = collection.app;\n\n    this.components = new Map();\n    this.tags = new Set();\n\n    // All entities have the 'all' tag.\n    this.tag(\"all\");\n  }\n\n  // Attach the provided component to this entity.\n  attach(component, ...initArgs) {\n    this[component.tag] = component.init(this, ...initArgs);\n    this.components.set(component.tag, component);\n    this.tag(component.tag);\n    return this;\n  }\n\n  // Remove the given component from this entity.\n  detach(tag) {\n    const { exit } = this.components.get(tag);\n    this[tag] = undefined;\n    this.components.delete(tag);\n    this.untag(tag);\n    if (exit) exit(this);\n    return this;\n  }\n\n  // Add the tag to this entity.\n  // (And add the entity to the corresponding index of the collection.)\n  tag(tag) {\n    this.tags.add(tag);\n    this.collection.index(tag).set.add(this);\n    return this;\n  }\n\n  // Remove the tag from this entity.\n  // (And remove the entity from the corresponding index.)\n  untag(tag) {\n    this.tags.delete(tag);\n    this.collection.index(tag).set.delete(this);\n    return this;\n  }\n\n  // Clean up any attached components and free all internal references\n  // to the entity, allowing it to be garbage collected.\n  destroy() {\n    this.components.values().forEach(({ exit }) => {\n      if (exit) exit(this);\n    });\n    this.tags.forEach((tag) => {\n      this.collection.index(tag).set.delete(this);\n    });\n    this.destroyed = true;\n  }\n}\n","// Represents a set of entities, usually as the result of a query.\nexport class EntitySet {\n  constructor(collection, entities) {\n    this.collection = collection;\n    this.set = new Set(entities);\n  }\n\n  // Return a new set containing only the entities from this set which\n  // have the given tag.\n  and(tag) {\n    return this.filter((entity) => entity.tags.has(tag));\n  }\n\n  // Return a new set containing only the entities from this set which\n  // do not have the given tag.\n  andNot(tag) {\n    return this.filter((entity) => !entity.tags.has(tag));\n  }\n\n  // Return a new set containing a union between this set and the set of\n  // entities which have the given tag.\n  or(tag) {\n    return new EntitySet(this.collection, [\n      ...this.set,\n      ...this.collection.get(tag),\n    ]);\n  }\n\n  // Return a new set filtered in a similar way to `Array.prototype.filter`.\n  filter(callback) {\n    const filtered = new EntitySet(this.collection);\n    this.forEach((entity) => {\n      if (callback(entity)) filtered.set.add(entity);\n    });\n    return filtered;\n  }\n\n  // See `Set.prototype.forEach`.\n  forEach(callback) {\n    this.set.forEach(callback);\n  }\n\n  // Allow iteration of this object.\n  [Symbol.iterator]() {\n    return this.set.values();\n  }\n}\n","import { Entity } from \"./Entity.js\";\nimport { EntitySet } from \"./EntitySet.js\";\n\n// Represents the collection of all entities for an app and provides an\n// interface to access them.\nexport class EntityCollection {\n  constructor(app) {\n    // The Application instance. This is only stored so that entities can\n    // access it from component `init` or `exit` functions.\n    this.app = app;\n\n    // Store internal indexes for quickly accessing entities grouped by tags.\n    this.indexes = new Map();\n  }\n\n  // Return a new entity managed by this collection.\n  create() {\n    return new Entity(this);\n  }\n\n  // Return the set of entities with the given tag.\n  get(tag) {\n    if (this.indexes.has(tag)) return this.indexes.get(tag);\n    else return new EntitySet(this);\n  }\n\n  // Return the requested index, creating it if necessary.\n  // The difference between this and get() is that this creates, stores, and\n  // returns a new index if it receives a tag that has no index,\n  // while `get` simply returns an empty set.\n  index(tag) {\n    let set;\n    if (this.indexes.has(tag)) {\n      set = this.indexes.get(tag);\n    } else {\n      set = new EntitySet(this);\n      this.indexes.set(tag, set);\n    }\n    return set;\n  }\n}\n","export class SystemManager {\n  constructor(app) {\n    this.app = app;\n\n    // A Map pairing running systems to any metadata necessary to manage them.\n    this.systemMetadata = new Map();\n  }\n\n  // Start a system.\n  start(system, ...initArgs) {\n    // Initialize the system and store any state.\n    const state = system.init && system.init(this.app, ...initArgs);\n    const metadata = { state };\n\n    if (system.action) {\n      // App instance should always be passed to the action.\n      const boundArgs = [this.app];\n\n      // State should only be passed to the action if it exists.\n      if (state !== undefined) boundArgs.push(state);\n\n      // Bind the arguments to the action.\n      const action = system.action.bind(undefined, ...boundArgs);\n\n      // Register the bound action as an event listener.\n      this.app.event.addListener(system.event, action);\n\n      // And add it to the metadata so we can remove the listener later.\n      metadata.action = action;\n    }\n\n    // Store any metadata for later use in `stop()`.\n    this.systemMetadata.set(system, metadata);\n  }\n\n  // Stop a system.\n  stop(system) {\n    const { state, action } = this.systemMetadata.get(system);\n\n    if (system.exit) system.exit(this.app, state);\n    if (action) this.app.event.removeListener(system.event, action);\n\n    this.systemMetadata.delete(system);\n  }\n}\n","// Return the number of seconds passed since some fixed point in time.\nexport function getTime() {\n  if (globalThis.performance) return performance.now() / 1000;\n  else {\n    // Fall back to a Node API if high-quality standards aren't implemented.\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import { getTime } from \"./getTime.js\";\n\n// This is the default game loop used if you do not provide a custom\n// `startGame` function to the Application constructor.\nexport function startDefaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function step() {\n    // Calculate frame delta time in seconds.\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame.\n  function rafLoop() {\n    step();\n    requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame if available, otherwise use setInterval.\n  if (globalThis.requestAnimationFrame) requestAnimationFrame(rafLoop);\n  else setInterval(step, 1000 / 60);\n}\n","import pkg from \"../../package.json\";\n\n// Display a nice banner in the console.\nexport function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (globalThis.document) {\n    // Style with CSS in browsers.\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences otherwise.\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","import { EventEmitter } from \"./EventEmitter.js\";\nimport { EntityCollection } from \"./EntityCollection.js\";\nimport { SystemManager } from \"./SystemManager.js\";\nimport { startDefaultLoop } from \"../utils/startDefaultLoop.js\";\nimport { logBanner } from \"../utils/logBanner.js\";\n\n// Provides an interface to events, entities, and systems.\nexport class Application {\n  constructor({\n    startGame = startDefaultLoop,\n    state = {},\n    hideBanner = false,\n  } = {}) {\n    // A store for global state.\n    this.state = state;\n\n    // An EventEmitter for messaging throughout the game.\n    this.event = new EventEmitter();\n\n    // An EntityCollection for creating and querying entities.\n    this.entity = new EntityCollection(this);\n\n    // A SystemManager for starting and stopping systems.\n    this.system = new SystemManager(this);\n\n    // Call the `startGame` function, which should initiate the game loop.\n    // It takes the app instance as its only argument.\n    startGame(this);\n\n    // Print the fae banner to console unless `hideBanner` is true.\n    if (!hideBanner) logBanner();\n  }\n}\n","import { Application } from \"./core/Application.js\";\nimport { getTime } from \"./utils/getTime.js\";\nimport { logBanner } from \"./utils/logBanner.js\";\n\nexport { Application } from \"./core/Application.js\";\nexport { getTime } from \"./utils/getTime.js\";\nexport { logBanner } from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  getTime,\n  logBanner,\n};\n"],"names":["EventEmitter","[object Object]","this","events","Map","event","listener","listeners","get","Set","set","add","delete","size","args","forEach","Entity","collection","app","components","tags","tag","component","initArgs","init","exit","undefined","untag","index","values","destroyed","EntitySet","entities","filter","entity","has","callback","filtered","Symbol","iterator","EntityCollection","indexes","SystemManager","systemMetadata","system","state","metadata","action","boundArgs","push","bind","addListener","removeListener","getTime","globalThis","performance","now","t","process","hrtime","startDefaultLoop","currentTime","dt","lastTime","step","emit","requestAnimationFrame","rafLoop","setInterval","logBanner","message","pkg","document","console","log","replace","Application","startGame","hideBanner"],"mappings":"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"}