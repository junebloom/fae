{"version":3,"file":"fae.js","sources":["../src/utils/pascalToCamel.js","../src/utils/logBanner.js","../src/core/Application.js","../src/core/Entity.js","../src/index.js"],"sourcesContent":["const re = /^[A-Z](?:[A-Z](?![a-z]))*/\n\n// Return a camelCase version of a PascalCase identifier\nexport default function pascalToCamel (string) {\n  return string.replace(re, match => match.toLowerCase())\n}\n","/* eslint no-console: \"off\" */\nimport { version } from '../../package.json'\n\n// Display a nice banner in the browser console\nexport default function logBanner () {\n  console.log(`%cfae â™¥ ${version}%c https://github.com/sambrosia/fae `, `\n    background: #aaf;\n    color: white;\n    line-height: 39px;\n    padding: 4px 10px;\n    border-radius: 30px;\n  `, 'color: #aaf;')\n}\n","import EventEmitter from 'eventemitter3'\nimport { logBanner } from '../utils'\n\n// Provides events and manages systems, scenes, and entity groups\nexport default class Application {\n  constructor (start = main) {\n    // ## Properties\n    // *(read-only)*\n\n    // An EventEmitter for messaging throughout the game\n    this.event = new EventEmitter()\n\n    // A Set containing all currently running ECS systems\n    this.systems = new Set()\n\n    // An object whose keys are group names and whose values are Sets\n    // containing groups of related entities\n    this.groups = { all: new Set() }\n\n    start(this)\n    logBanner()\n  }\n\n  // ## Methods\n\n  // Return an array of entities that belong to all of the provided groups\n  entitiesWith (...groups) {\n    groups.sort((a, b) => this.groups[a].size - this.groups[b].size)\n    const entities = []\n    for (const entity of this.groups[groups[0]]) {\n      if (entity.hasGroups(...groups)) entities.push(entity)\n    }\n    return entities\n  }\n\n  // Register `system`'s event listeners and return 'system'\n  startSystem (system) {\n    this.systems.add(system)\n    for (const listener in system.listeners) {\n      this.event.on(listener, system.listeners[listener], system)\n    }\n    return system\n  }\n\n  // Unregister `system`'s event listeners\n  stopSystem (system) {\n    this.systems.delete(system)\n    for (const listener in system.listeners) {\n      this.event.removeListener(listener, system.listeners[listener], system)\n    }\n  }\n\n  enterScene (scene) {\n    this.event.emit('exitScene')\n    for (const system of this.systems) this.stopSystem(system)\n    for (const entity of this.groups.all) {\n      if (!entity.persistent) entity.destroy()\n    }\n    scene()\n  }\n}\n\n// #### Default game loop\n\n// Used if you do not provide a custom `start` function to the\n// `Application` constructor\nfunction main (app) {\n  let dt = 0\n  let lastTime = window.performance.now()\n\n  function gameLoop () {\n    app.event.emit('preupdate')\n\n    const currentTime = window.performance.now()\n    dt = (currentTime - lastTime) / 1000\n    lastTime = currentTime\n\n    app.event.emit('update', dt)\n    app.event.emit('draw')\n\n    window.requestAnimationFrame(gameLoop)\n  }\n  gameLoop()\n}\n","import { pascalToCamel } from '../utils'\n\n// Composes one logical 'object' in the game using components\nexport default class Entity {\n  constructor (app) {\n    // ## Properties\n    // *(read-only)*\n\n    // A reference to an `Application` instance\n    this.app = app\n\n    // The Set of group names that this entity is a member of\n    this.groups = new Set()\n\n    this.group('all')\n  }\n\n  // ## Methods\n\n  // Attach the provided component instances to the entity\n  attach (...components) {\n    for (const component of components) {\n      const rawName = Object.getPrototypeOf(component).constructor.name\n      const name = pascalToCamel(rawName)\n\n      this[name] = component\n      this.group(name)\n\n      component.entity = this\n    }\n    return this\n  }\n\n  detach (...componentNames) {\n    for (const name of componentNames) {\n      this[name] = null\n      this.ungroup(name)\n    }\n    return this\n  }\n\n  // Add this entity to the provided groups,\n  // creating any that don't already exist\n  group (...groups) {\n    for (const group of groups) {\n      if (!this.app.groups[group]) this.app.groups[group] = new Set()\n      this.app.groups[group].add(this)\n      this.groups.add(group)\n    }\n    return this\n  }\n\n  ungroup (...groups) {\n    for (const group of groups) {\n      this.app.groups[group].delete(this)\n      this.groups.delete(group)\n    }\n    return this\n  }\n\n  hasGroups (...groups) {\n    for (const group of groups) {\n      if (!this.groups.has(group)) return false\n    }\n    return true\n  }\n\n  // Free all of fae's internal references to the entity,\n  // allowing it to be garbage collected\n  destroy () {\n    this.destroyed = true\n    for (const group of this.groups) {\n      this.ungroup(group)\n    }\n  }\n}\n","import { Application, Entity } from './core'\nimport * as utils from './utils'\n\nexport default { Application, Entity, utils }\n"],"names":["pascalToCamel","string","replace","re","match","toLowerCase","logBanner","console","log","version","main","app","gameLoop","event","emit","const","currentTime","window","performance","now","dt","lastTime","requestAnimationFrame","let","Application","start","this","EventEmitter","systems","Set","groups","all","entitiesWith","sort","a","b","size","entities","entity","hasGroups","push","startSystem","system","add","listener","listeners","this$1","on","stopSystem","delete","removeListener","enterScene","scene","persistent","destroy","Entity","group","attach","components","component","name","Object","getPrototypeOf","constructor","detach","componentNames","ungroup","has","destroyed","utils"],"mappings":"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"}