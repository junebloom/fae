{"version":3,"file":"fae.js","sources":["../src/core/EventEmitter.js","../src/core/Entity.js","../src/core/EntityCollection.js","../src/utils/logBanner.js","../src/utils/getTime.js","../src/core/defaultLoop.js","../src/core/Application.js","../src/fae.js"],"sourcesContent":["// A small event emitter class which implements a subset of the Node API of the\n// same name\nexport class EventEmitter {\n  constructor() {\n    // ## Properties\n    // *(read-only)*\n\n    // A Map where the keys are event names and the values are Maps of\n    // listener-function/frontArgs pairs\n    this.events = new Map();\n  }\n\n  // ## Methods\n\n  // Register the given event listener\n  addListener(event, listener, ...frontArgs) {\n    let listeners = this.events.get(event);\n\n    // Create a new Map to hold the event's listeners, if it doesn't exist yet\n    if (!listeners) {\n      listeners = new Map();\n      this.events.set(event, listeners);\n    }\n\n    // Add the listener to the Map, paired with its frontArgs.\n    // The frontArgs are always passed as the first arguments to this listener\n    // when the event is emitted.\n    listeners.set(listener, frontArgs);\n\n    return this;\n  }\n\n  // Unregister the given event listener\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.forEach((frontArgs, listener) => {\n      listener.call(undefined, ...frontArgs, ...args);\n    });\n  }\n}\n","// Composes one logical 'object' in the game using components\nexport class Entity {\n  constructor(collection) {\n    // ## Properties\n    // *(read-only)*\n\n    this.collection = collection;\n    this.components = new Map();\n    this.tags = new Set();\n\n    // All entities have the 'all' tag.\n    this.tag(\"all\");\n  }\n\n  // ## Methods\n\n  // Attach the provided component to this entity\n  attach(component, ...args) {\n    this[component.key] = component.init(this, ...args);\n    this.components.set(component.key, component);\n    this.tag(component.key);\n    return this;\n  }\n\n  // Remove the given component from this entity\n  detach(key) {\n    const { exit } = this.components.get(key);\n    this[key] = undefined;\n    this.components.delete(key);\n    this.untag(key);\n    if (exit) exit(this);\n    return this;\n  }\n\n  // Add the tag to this entity\n  // and add this entity to the corresponding index of the collection.\n  tag(tag) {\n    this.tags.add(tag);\n    this.collection.index(tag).set.add(this);\n    return this;\n  }\n\n  // Remove the tag from this entity\n  // and remove the entity from the corresponding index.\n  untag(tag) {\n    this.tags.delete(tag);\n    this.collection.index(tag).set.delete(this);\n    return this;\n  }\n\n  // Clean up any attached components and free all of fae's internal references\n  // to the entity, allowing it to be garbage collected.\n  destroy() {\n    this.components.values().forEach(({ exit }) => {\n      if (exit) exit(this);\n    });\n    this.tags.forEach((tag) => this.collection.index(tag).set.delete(this));\n    this.destroyed = true;\n  }\n}\n","import { Entity } from \"./Entity.js\";\n\n// Represents a set of entities, usually as the result of a query.\nclass EntitySet {\n  constructor(collection, entities) {\n    this.collection = collection;\n    this.set = new Set(entities);\n  }\n\n  // Returns a new set containing only the entities from this set which\n  // have the given tag.\n  and(tag) {\n    return this.filter((entity) => entity.tags.has(tag));\n  }\n\n  // Returns a new set containing only the entities from this set which\n  // do not have the given tag.\n  andNot(tag) {\n    return this.filter((entity) => !entity.tags.has(tag));\n  }\n\n  // Returns a new set containing a union between this set and the set of\n  // entities which have the given tag.\n  or(tag) {\n    return new EntitySet(this.collection, [\n      ...this.set,\n      ...this.collection.get(tag),\n    ]);\n  }\n\n  // Returns a new set filtered in the same way as `Array.prototype.filter`.\n  filter(callback) {\n    const filtered = new EntitySet(this.collection);\n    this.forEach((entity) => {\n      if (callback(entity)) filtered.set.add(entity);\n    });\n    return filtered;\n  }\n\n  // See `Set.prototype.forEach`.\n  forEach(callback) {\n    this.set.forEach(callback);\n  }\n\n  // Allow iteration of this object.\n  [Symbol.iterator]() {\n    return this.set.values();\n  }\n}\n\n// Represents the collection of all entities for an app and provides an\n// interface to access them.\nexport class EntityCollection {\n  constructor() {\n    // Store internal indexes for quickly accessing entities grouped by tags.\n    this.indexes = new Map();\n  }\n\n  // Returns a new entity.\n  create() {\n    return new Entity(this);\n  }\n\n  // Returns the set of entities for the tag\n  get(tag) {\n    if (this.indexes.has(tag)) return this.indexes.get(tag);\n    else return new EntitySet(this);\n  }\n\n  // Return the requested index, creating it if necessary.\n  index(tag) {\n    let set;\n    if (this.indexes.has(tag)) {\n      set = this.indexes.get(tag);\n    } else {\n      set = new EntitySet(this);\n      this.indexes.set(tag, set);\n    }\n    return set;\n  }\n}\n","import pkg from \"../../package.json\";\n\n// Display a nice banner in the console\nexport function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (globalThis.document) {\n    // Style with CSS in browsers\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences in node\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","// Return # of seconds past an arbitrary point in time in browser or node\nexport function getTime() {\n  if (globalThis.performance) return performance.now() / 1000;\n  else {\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import { getTime } from \"../utils/getTime.js\";\n\n// Default game loop used if you do not provide a custom `startGame` function to\n// the `Application` constructor\nexport function defaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function gameLoop() {\n    // Calculate frame delta time in seconds\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame\n  function rafLoop() {\n    gameLoop();\n    requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame if available, otherwise use setInterval\n  // In either case, wait a frame before beginning\n  if (globalThis.requestAnimationFrame) requestAnimationFrame(rafLoop);\n  else setInterval(gameLoop, 1000 / 60);\n}\n","import { EventEmitter } from \"./EventEmitter.js\";\nimport { EntityCollection } from \"./EntityCollection.js\";\nimport { logBanner } from \"../utils/logBanner.js\";\nimport { defaultLoop } from \"./defaultLoop.js\";\n\n// Provides events and manages systems, scenes, and entity groups\nexport class Application {\n  constructor({ hideBanner = false, startGame = defaultLoop }) {\n    // ## Properties\n    // *(read-only)*\n\n    // An EventEmitter for messaging throughout the game\n    this.event = new EventEmitter();\n\n    // An EntityCollection for creating and querying entities\n    this.entity = new EntityCollection();\n\n    // A Set containing all currently running systems\n    this.systems = new Set();\n\n    // Call the `startGame` function, which should initiate the game loop\n    // It takes the app instance as its only argument\n    startGame(this);\n\n    // Print the fae banner to console unless `hideBanner` is truthy\n    if (!hideBanner) logBanner();\n  }\n\n  // ## Methods\n\n  // Initialize the system and register its event listener.\n  startSystem(system) {\n    const args = [system.event, system.action, this];\n    if (system.init) {\n      const initialState = system.init(this);\n      if (initialState !== undefined) args.push(initialState);\n    }\n    this.systems.add(system);\n    this.event.addListener(...args);\n  }\n\n  // Unregister system's event listener and clean up\n  stopSystem(system) {\n    this.event.removeListener(system.event, system.action);\n    this.systems.delete(system);\n    if (system.exit) system.exit(this);\n  }\n\n  // Stop/destroy all non-persistent systems and entities\n  // Includes persistent entities if `clearAll` is truthy\n  clear(clearAll = false) {\n    for (const system of this.systems) {\n      if (!system.persistent || clearAll) this.stopSystem(system);\n    }\n    for (const entity of this.groups.all) {\n      if (!entity.persistent || clearAll) entity.destroy();\n    }\n  }\n}\n","import { Application } from \"./core/Application.js\";\nimport { getTime } from \"./utils/getTime.js\";\nimport { logBanner } from \"./utils/logBanner.js\";\n\nexport { Application } from \"./core/Application.js\";\nexport { getTime } from \"./utils/getTime.js\";\nexport { logBanner } from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  getTime,\n  logBanner,\n};\n"],"names":["EventEmitter","[object Object]","this","events","Map","event","listener","frontArgs","listeners","get","set","delete","size","args","forEach","call","undefined","Entity","collection","components","tags","Set","tag","component","key","init","exit","untag","add","index","values","destroyed","EntitySet","entities","filter","entity","has","callback","filtered","Symbol","iterator","EntityCollection","indexes","logBanner","message","pkg","globalThis","document","console","log","replace","getTime","performance","now","t","process","hrtime","defaultLoop","app","currentTime","dt","lastTime","gameLoop","emit","requestAnimationFrame","rafLoop","setInterval","Application","hideBanner","startGame","systems","system","action","initialState","push","addListener","removeListener","clearAll","persistent","stopSystem","groups","all","destroy"],"mappings":"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"}