{"version":3,"file":"fae.js","sources":["../src/utils/logBanner.js","../src/core/EventEmitter.js","../src/utils/getTime.js","../src/core/defaultLoop.js","../src/fae.js","../src/core/Application.js","../src/core/Entity.js"],"sourcesContent":["import pkg from \"../../package.json\";\n\n// Display a nice banner in the console\nexport default function logBanner() {\n  const message = `%cfae â™¥ ${pkg.version}%c https://github.com/${pkg.repository} `;\n\n  if (global.window) {\n    // Style with CSS in browsers\n    console.log(\n      message,\n      `\n        background: #aaf;\n        color: white;\n        padding: 4px 10px;\n        border-radius: 30px;\n      `,\n      \"color: #aaf;\"\n    );\n  } else {\n    // Color with ANSI escape sequences in node\n    console.log(\n      message\n        .replace(/%c/, \"\\x1B[35m\\x1b[1m\")\n        .replace(/%c/, \"\\x1b[0m\\x1b[35m\") + \"\\x1b[0m\"\n    );\n  }\n}\n","// A small event emitter class which implements a subset of the Node API of the\n// same name\nexport default class EventEmitter {\n  constructor() {\n    // ## Properties\n    // *(read-only)*\n\n    // A Map where the keys are event names and the values are Maps of\n    // listener/context pairs\n    this.events = new Map();\n  }\n\n  // ## Methods\n\n  // Register the given event listener\n  on(event, listener, context) {\n    let listeners = this.events.get(event);\n\n    // Create a new Map to hold the event's listeners, if it doesn't exist yet\n    if (!listeners) {\n      listeners = new Map();\n      this.events.set(event, listeners);\n    }\n\n    // Add the listener to the Map, paired with its intended `this` context\n    listeners.set(listener, context);\n\n    return this;\n  }\n\n  // Unregister the given event listener\n  removeListener(event, listener) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.delete(listener);\n\n    // Also delete the entry for the event if it has no more registered listeners\n    if (listeners.size === 0) this.events.delete(event);\n\n    return this;\n  }\n\n  // Call all listeners for the event in order of registration,\n  // passing the given arguments\n  emit(event, ...args) {\n    const listeners = this.events.get(event);\n    if (!listeners) return;\n\n    listeners.forEach((context, listener) => {\n      listener.apply(context, args);\n    });\n  }\n}\n","// Return # of seconds past an arbitrary point in time in browser or node\nexport default function getTime() {\n  if (global.window) return window.performance.now() / 1000;\n  else {\n    const t = process.hrtime();\n    return t[0] + t[1] / 1e9;\n  }\n}\n","import getTime from \"../utils/getTime.js\";\n\n// Default game loop used if you do not provide a custom `startGame` function to\n// the `Application` constructor\nexport default function defaultLoop(app) {\n  let lastTime = getTime();\n  let currentTime, dt;\n\n  function gameLoop() {\n    // Calculate frame delta time in seconds\n    currentTime = getTime();\n    dt = currentTime - lastTime;\n    lastTime = currentTime;\n\n    app.event.emit(\"update\", dt);\n    app.event.emit(\"draw\");\n  }\n\n  // Function to start looping using requestAnimationFrame\n  function rafLoop() {\n    gameLoop();\n    window.requestAnimationFrame(rafLoop);\n  }\n\n  // Use requestAnimationFrame in browsers and setInterval in Node\n  // In either case, wait a frame before beginning\n  if (global.window) window.requestAnimationFrame(rafLoop);\n  else setInterval(gameLoop, 1000 / 60);\n}\n","import Application from \"./core/Application.js\";\nimport Entity from \"./core/Entity.js\";\nimport getTime from \"./utils/getTime.js\";\nimport logBanner from \"./utils/logBanner.js\";\n\nexport default {\n  Application,\n  Entity,\n  utils: { getTime, logBanner },\n};\n","import logBanner from \"../utils/logBanner.js\";\nimport EventEmitter from \"./EventEmitter.js\";\nimport defaultLoop from \"./defaultLoop.js\";\n\n// Provides events and manages systems, scenes, and entity groups\nexport default class Application {\n  constructor(startGame = defaultLoop) {\n    // ## Properties\n    // *(read-only)*\n\n    // An EventEmitter for messaging throughout the game\n    this.event = new EventEmitter();\n\n    // A Set containing all currently running ECS systems\n    this.systems = new Set();\n\n    // An object whose keys are group names and whose values are Sets\n    // containing groups of related entities\n    this.groups = {};\n    this.createGroup(\"all\");\n\n    // Call the `startGame` function, which should initiate the game loop\n    // It takes the app instance as its only argument\n    startGame(this);\n\n    // Print the fae banner to the console upon the first frame of the gameloop\n    // being processed, unless `this.hideBanner` is truthy\n    setTimeout(() => {\n      if (!this.hideBanner) logBanner();\n    }, 0);\n  }\n\n  // ## Methods\n\n  // Create an empty group with the given name and return it\n  createGroup(name) {\n    this.groups[name] = new Set();\n    return this.groups[name];\n  }\n\n  // Return an array of entities that belong to *all* of the provided groups\n  entitiesWith(...groups) {\n    for (const group of groups) if (!this.groups[group]) return [];\n    groups.sort((a, b) => this.groups[a].size - this.groups[b].size);\n    const entities = [];\n    for (const entity of this.groups[groups[0]]) {\n      if (entity.hasGroups(...groups)) entities.push(entity);\n    }\n    return entities;\n  }\n\n  // Register `system`'s event listeners and return `system`\n  startSystem(system) {\n    this.systems.add(system);\n    for (const listener in system.listeners) {\n      this.event.on(listener, system.listeners[listener], system);\n    }\n    return system;\n  }\n\n  // Unregister `system`'s event listeners\n  stopSystem(system) {\n    this.systems.delete(system);\n    for (const listener in system.listeners) {\n      this.event.removeListener(listener, system.listeners[listener]);\n    }\n  }\n\n  // Stop/destroy all non-persistent systems and entities\n  // Includes persistent entities if `clearAll` is truthy\n  clear(clearAll = false) {\n    for (const system of this.systems) {\n      if (!system.persistent || clearAll) this.stopSystem(system);\n    }\n    for (const entity of this.groups.all) {\n      if (!entity.persistent || clearAll) entity.destroy();\n    }\n  }\n}\n","// Composes one logical 'object' in the game using components\nexport default class Entity {\n  constructor(app) {\n    // ## Properties\n    // *(read-only)*\n\n    // A reference to an `Application` instance\n    this.app = app;\n\n    // The Set of group names that this entity is a member of\n    this.groups = new Set();\n\n    // Add this entity to the 'all' group\n    this.group(\"all\");\n  }\n\n  // ## Methods\n\n  // Attach the provided component instances to this entity\n  attach(...components) {\n    for (const component of components) {\n      this[component.key] = component;\n      this.group(component.key);\n      if (component.componentWasAttached) component.componentWasAttached(this);\n    }\n    return this;\n  }\n\n  // Remove the given components from this entity\n  detach(...components) {\n    for (const component of components) {\n      if (this[component.key] !== component)\n        throw new Error(\"component is not attached to this entity\");\n      if (component.componentWillBeDetached)\n        component.componentWillBeDetached(this);\n      this.ungroup(component.key);\n      this[component.key] = null;\n    }\n    return this;\n  }\n\n  // Add this entity to the provided groups,\n  // creating any that don't already exist\n  group(...groupNames) {\n    for (const name of groupNames) {\n      (this.app.groups[name] || this.app.createGroup(name)).add(this);\n      this.groups.add(name);\n    }\n    return this;\n  }\n\n  // Remove this entity from the provided groups\n  ungroup(...groupNames) {\n    for (const name of groupNames) {\n      if (!this.app.groups[name]) continue;\n      this.app.groups[name].delete(this);\n      this.groups.delete(name);\n    }\n    return this;\n  }\n\n  // Return `true` if this entity belongs to every group provided\n  hasGroups(...groups) {\n    for (const group of groups) {\n      if (!this.groups.has(group)) return false;\n    }\n    return true;\n  }\n\n  // Return an array of all components attached to this entity\n  getComponents() {\n    const components = [];\n    for (const [key, value] of Object.entries(this)) {\n      if (value && value.key && value.key === key && this.groups.has(key)) {\n        components.push(value);\n      }\n    }\n    return components;\n  }\n\n  // Free all of fae's internal references to the entity,\n  // allowing it to be garbage collected\n  destroy() {\n    this.detach(...this.getComponents());\n    this.ungroup(...this.groups);\n    this.destroyed = true;\n  }\n}\n"],"names":["logBanner","message","pkg","global","window","console","log","replace","EventEmitter","[object Object]","this","events","Map","event","listener","context","listeners","get","set","delete","size","args","forEach","apply","getTime","performance","now","t","process","hrtime","defaultLoop","app","currentTime","dt","lastTime","gameLoop","emit","requestAnimationFrame","rafLoop","setInterval","Application","startGame","systems","Set","groups","createGroup","setTimeout","hideBanner","name","group","sort","a","b","entities","entity","hasGroups","push","system","add","on","removeListener","clearAll","persistent","stopSystem","all","destroy","Entity","components","component","key","componentWasAttached","Error","componentWillBeDetached","ungroup","groupNames","has","value","Object","entries","detach","getComponents","destroyed","utils"],"mappings":"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"}